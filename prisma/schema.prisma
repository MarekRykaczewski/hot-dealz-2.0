// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  relationMode = "prisma"
}

model User {
  id String @id @default(uuid())
  clerkId String @unique
  username String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deals Deal[]
  savedDeals SavedDeal[]
  votes Vote[]
  comments Comment[]
  commentReactions CommentReaction[]
}

model Deal {
  id String @id @default(uuid())
  userId String // References clerk user
  title String @db.Text
  link String @db.Text
  description String? @db.Text
  promoCode String?

  score Int // Overall score based on votes
  
  isPublished Boolean @default(false)

  imageUrls String[]
  
  categoryId String?
  
  category Category? @relation(fields: [categoryId], references: [id])
  
  comments Comment[]
  votes Vote[]
  savedBy SavedDeal[]

  startDate DateTime?
  endDate DateTime?

  price Float?
  nextBestPrice Float?
  shippingPrice Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [clerkId])

  @@index([categoryId])
  @@index([userId])
}

model SavedDeal {
  id String @id @default(uuid())
  userId String
  dealId String

  user User @relation(fields: [userId], references: [clerkId])
  deal Deal @relation(fields: [dealId], references: [id])

  @@unique([userId, dealId])
  @@index([dealId])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  deals Deal[]
  parentCategory Category? @relation("Subcategories", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  parentId String?
  subcategories Category[] @relation("Subcategories")

  @@index([parentId])
}

model Vote {
  id String @id @default(uuid())
  userId String
  dealId String
  voteValue Int // +1 for upvote, -1 for downvote

  deal Deal @relation(fields: [dealId], references: [id])
  user User @relation(fields: [userId], references: [clerkId])

  @@index([dealId])
  @@index([userId])
}

model Comment {
  id String @id @default(uuid())
  dealId String
  content String @db.Text
  userId String
  parentId String?
  createdAt DateTime @default(now())

  reactions CommentReaction[]

  deal Deal @relation(fields: [dealId], references: [id])
  parentComment Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  childComments Comment[] @relation("CommentReplies")

  user User @relation(fields: [userId], references: [clerkId])

  @@index([dealId])
  @@index([parentId])
  @@index([userId])
}

model CommentReaction {
  id String @id @default(uuid())
  userId String
  commentId String
  reaction String   // "like", "funny", "helpful"

  comment Comment @relation(fields: [commentId], references: [id])
  user User @relation(fields: [userId], references: [clerkId])

  @@index([commentId])
  @@index([userId])
}